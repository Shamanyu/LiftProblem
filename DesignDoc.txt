Problem statement:

  - Design and implement an elevator system to manage all the elevators in a
    building, to minimise the average time taken by an user to travel from their
    present floor to their desired floor.
      - Elevators can be added, removed, or temporarily down for maintenance.


Classes:

  - LiftManager (Singleton class)
    - State
      - id: Unique identifier
      - lift list: List of lift objects to manage
      - instruction queue: Queue of instructions to process
    - Methods
      - add lift: Add a lift
      - remove lift: Remove a lift
      - add instruction: Add an instruction
      - remove instruction: Remove an instruction

  - Lift
    - State
      - id: Unique identifier
      - instruction list: Sorted lists of orthogonal instructions the lift is going
      to follow
      - add instruction: Add an instruction
      - remove instruction: Remove an instruction

  - Instruction
    - State
      - id: Unique identifier
      - name: Human readable name for an instruction
      - sub instruction list: Sorted list of instructions to follow to serve
        this instruction (Note: This helps build instructions recursively.
        Moreover, this will be empty if an instruction has no sub instructions).
    - Method
      - add instruction: Add an instruction
      - remove instruction: Remove an instruction

API contract:

  - LiftManager
    - summon-lift/3: Summon the lift specifying:
      1) current floor
      2) direction to travel in
      3) set of lifts to choose from
    - cancel-summon-lift/3: Cancel command to summon the lift specifying:
      1) current floor
      2) direction to travel in
      3) set of lifts to choose from

  - Lift
    - go-to/1: Specify which floor to travel to
      1) destination floor
    - cancel-command/1: Specify cancelation of request to travel to particular
      floor
      1) canceled destination floor
